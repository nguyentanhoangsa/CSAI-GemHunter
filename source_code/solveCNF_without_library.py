import copy

def DPLL(originalCNFs, listPuzzle):

    cnfs = copy.deepcopy(originalCNFs)
    #1
    indexUnitClause=unitClause(cnfs)
    while indexUnitClause!=-1:
        l=cnfs[indexUnitClause][0]
        if l <0:
            listPuzzle[(-l)-1]="G"
        else :
            listPuzzle[l-1]="T"
        unitPropagate(l,cnfs)
        indexUnitClause=unitClause(cnfs)
    #2
    pureVariable=findPureVariable(cnfs)
    while pureVariable!=-1:
        if pureVariable <0:
            listPuzzle[(-pureVariable)-1]="G"
        else :
            listPuzzle[pureVariable-1]="T"
        pureLiteralAssign(pureVariable,cnfs)
        pureVariable=findPureVariable(cnfs)
    
    if len(cnfs)==0:
        return True,listPuzzle
    
    if [] in cnfs:
        return False,None
    
    l=cnfs[0][0]
    cnfNew = copy.deepcopy(cnfs)
    cnfNew.append([l])
    listNewPuzzle=copy.deepcopy(listPuzzle)
    isSuccessfulSolver, newListPuzzle=DPLL(cnfNew,listNewPuzzle)
    if isSuccessfulSolver:
        return isSuccessfulSolver,newListPuzzle

    cnfNew1 = copy.deepcopy(cnfs)
    cnfNew1.append([-l])
    listNewPuzzle1=copy.deepcopy(listPuzzle)
    isSuccessfulSolver1, newListPuzzle1=DPLL(cnfNew1,listNewPuzzle1)
    return isSuccessfulSolver1,newListPuzzle1


#-------------------------------   
#Duyệt tất cả tìm phần tử là mệnh đề đơn chứ k lm riêng dò từng phần tử được
#vì nếu là [[a,c],[b,d],[-c]] nó sẽ bỏ qua 0,1 dò tới 2 là [-c] nó sẽ bỏ c ra khỏi [a,c] để còn [[a],[b,d]] mà h nó hết vòng lặp rồi thì sao
#do đó nó sẽ bỏ qua phần tử đơn trong cnf do đó ta sẽ dò lại từ đầu luôn cho chắc
def unitClause(cnfs):
    for i in range(len(cnfs)):
        if  len(cnfs[i])==1:
            return i
    return -1
def unitPropagate(l,cnfs):
    i=0
    while i < len(cnfs):
        #xóa các clause chứa biến l vì nó đã đúng sẵn rồi
        if l in cnfs[i]:
            cnfs.pop(i) 
            continue

        #xóa các biến -l trong các mệnh đề đó vì l đúng 
        #thì -l sai nó k có ý nghĩa trong các mệnh đề khác
        if (-l) in cnfs[i]:
            cnfs[i].remove(-l)
        i+=1
#----------------------------------
def findPureVariable(cnfs):
    newCNF = []
    #chuyển về mảng đơn gồm các phần tử
    for sublist in cnfs:
        newCNF.extend(sublist)
    #tìm phần tử thuần túy trong danh sách
    for i in newCNF:
        if (-i) not in newCNF:
            return i
    return -1

def pureLiteralAssign(pureVariable,cnfs):
    #làm như này là sai, chạy thử rồi biết
    # pureVariable=1
    # cnf=[[1,2,3],[-1,1,3,4],[2,3,-4,-1],[3,4],[1]]
    # for item in cnf:
    #     if pureVariable in item:
    #         cnf.remove(item)
    i=0
    while i<len(cnfs):
        if pureVariable in cnfs[i]:
            cnfs.pop(i)
            i-=1
        i+=1
    
def main():
    cnfs=[[2, 11], [-2, 11], [-11, 2], [2, 4, 11], [-2, 4, 11], [-4, 2, 11], [-11, 2, 4], [-2, -4, 11], [-2, -11, 4], [-4, -11, 2], [4, 14, 15], [-4, 14, 15], [-14, 4, 15], [-15, 4, 14], [-4, -14, -15], [7, 14, 15], [-7, 14, 15], [-14, 7, 15], [-15, 7, 14], [-7, -14, -15], [7, 17, 18], [-7, 17, 18], [-17, 7, 18], [-18, 7, 17], [-7, -17, -18], [17, 18], [-17, -18], [2, 11], [-2, 11], [-11, 2], [2, 4, 11, 21], [-2, 4, 11, 21], [-4, 2, 11, 21], [-11, 2, 4, 21], [-21, 2, 4, 11], [-2, -4, 11, 21], [-2, -11, 4, 21], [-2, -21, 4, 11], [-4, -11, 2, 21], [-4, -21, 2, 11], [-11, -21, 2, 4], [-2, -4, -11, 21], [-2, -4, -21, 11], [-2, -11, -21, 4], [-4, -11, -21, 2], [4, 14, 21], [-4, 14, 21], [-14, 4, 21], [-21, 4, 14], [-4, -14, -21], [7, 15, 17, 24, 25, 26], [-7, 15, 17, 24, 25, 26], [-15, 7, 17, 24, 25, 26], [-17, 7, 15, 24, 25, 26], [-24, 7, 15, 17, 25, 26], [-25, 7, 15, 17, 24, 26], [-26, 7, 15, 17, 24, 25], [-7, -15, 17, 24, 25, 26], [-7, -17, 15, 24, 25, 26], [-7, -24, 15, 17, 25, 26], [-7, -25, 15, 17, 24, 26], [-7, -26, 15, 17, 24, 25], [-15, -17, 7, 24, 25, 26], [-15, -24, 7, 17, 25, 26], [-15, -25, 7, 17, 24, 26], [-15, -26, 7, 17, 24, 25], [-17, -24, 7, 15, 25, 26], [-17, -25, 7, 15, 24, 26], [-17, -26, 7, 15, 24, 25], [-24, -25, 7, 15, 17, 26], [-24, -26, 7, 15, 17, 25], [-25, -26, 7, 15, 17, 24], [-7, -15, -17, 24, 25, 26], [-7, -15, -24, 17, 25, 26], [-7, -15, -25, 17, 24, 26], [-7, -15, -26, 17, 24, 25], [-7, -17, -24, 15, 25, 26], [-7, -17, -25, 15, 24, 26], [-7, -17, -26, 15, 24, 25], [-7, -24, -25, 15, 17, 26], [-7, -24, -26, 15, 17, 25], [-7, -25, -26, 15, 17, 24], [-15, -17, -24, 7, 25, 26], [-15, -17, -25, 7, 24, 26], [-15, -17, -26, 7, 24, 25], [-15, -24, -25, 7, 17, 26], [-15, -24, -26, 7, 17, 25], [-15, -25, -26, 7, 17, 24], [-17, -24, -25, 7, 15, 26], [-17, -24, -26, 7, 15, 25], [-17, -25, -26, 7, 15, 24], [-24, -25, -26, 7, 15, 17], [-7, -15, -17, -24, 25, 26], [-7, -15, -17, -25, 24, 26], [-7, -15, -17, -26, 24, 25], [-7, -15, -24, -25, 17, 26], [-7, -15, -24, -26, 17, 25], [-7, -15, -25, -26, 17, 24], [-7, -17, -24, -25, 15, 26], [-7, -17, -24, -26, 15, 25], [-7, -17, -25, -26, 15, 24], [-7, -24, -25, -26, 15, 17], [-15, -17, -24, -25, 7, 26], [-15, -17, -24, -26, 7, 25], [-15, -17, -25, -26, 7, 24], [-15, -24, -25, -26, 7, 17], [-17, -24, -25, -26, 7, 15], [-7, -15, -17, -24, -25, -26], [11, 29], [-11, -29], [11, 21, 29], [-11, 21, 29], [-21, 11, 29], [-29, 11, 21], [-11, -21, -29], [14, 21, 31], [-14, -21, 31], [-14, -31, 21], [-21, -31, 14], [-14, -21, -31], [14, 15, 24, 31, 33], [-14, 15, 24, 31, 33], [-15, 14, 24, 31, 33], [-24, 14, 15, 31, 33], [-31, 14, 15, 24, 33], [-33, 14, 15, 24, 31], [-14, -15, -24, 31, 33], [-14, -15, -31, 24, 33], [-14, -15, -33, 24, 31], [-14, -24, -31, 15, 33], [-14, -24, -33, 15, 31], [-14, -31, -33, 15, 24], [-15, -24, -31, 14, 33], [-15, -24, -33, 14, 31], [-15, -31, -33, 14, 24], [-24, -31, -33, 14, 15], [-14, -15, -24, -31, 33], [-14, -15, -24, -33, 31], [-14, -15, -31, -33, 24], [-14, -24, -31, -33, 15], [-15, -24, -31, -33, 14], [-14, -15, -24, -31, -33], [17, 18, 26, 35], [-17, 18, 26, 35], [-18, 17, 26, 35], [-26, 17, 18, 35], [-35, 17, 18, 26], [-17, -18, -26, 35], [-17, -18, -35, 26], [-17, -26, -35, 18], [-18, -26, -35, 17], [-17, -18, -26, -35], [29, 38], [-29, -38], [21, 29, 31, 38], [-21, 29, 31, 38], [-29, 21, 31, 38], [-31, 21, 29, 38], [-38, 21, 29, 31], [-21, -29, -31, 38], [-21, -29, -38, 31], [-21, -31, -38, 29], [-29, -31, -38, 21], [-21, -29, -31, -38], [24, 31, 33, 41], [-24, -31, 33, 41], [-24, -33, 31, 41], [-24, -41, 31, 33], [-31, -33, 24, 41], [-31, -41, 24, 33], [-33, -41, 24, 31], [-24, -31, -33, 41], [-24, -31, -41, 33], [-24, -33, -41, 31], [-31, -33, -41, 24], [-24, -31, -33, -41], [24, 25, 26, 33, 35, 44], [-24, 25, 26, 33, 35, 44], [-25, 24, 26, 33, 35, 44], [-26, 24, 25, 33, 35, 44], [-33, 24, 25, 26, 35, 44], [-35, 24, 25, 26, 33, 44], [-44, 24, 25, 26, 33, 35], [-24, -25, -26, 33, 35, 44], [-24, -25, -33, 26, 35, 44], [-24, -25, -35, 26, 33, 44], [-24, -25, -44, 26, 33, 35], [-24, -26, -33, 25, 35, 44], [-24, -26, -35, 25, 33, 44], [-24, -26, -44, 25, 33, 35], [-24, -33, -35, 25, 26, 44], [-24, -33, -44, 25, 26, 35], [-24, -35, -44, 25, 26, 33], [-25, -26, -33, 24, 35, 44], [-25, -26, -35, 24, 33, 44], [-25, -26, -44, 24, 33, 35], [-25, -33, -35, 24, 26, 44], [-25, -33, -44, 24, 26, 35], [-25, -35, -44, 24, 26, 33], [-26, -33, -35, 24, 25, 44], [-26, -33, -44, 24, 25, 35], [-26, -35, -44, 24, 25, 33], [-33, -35, -44, 24, 25, 26], [-24, -25, -26, -33, 35, 44], [-24, -25, -26, -35, 33, 44], [-24, -25, -26, -44, 33, 35], [-24, -25, -33, -35, 26, 44], [-24, -25, -33, -44, 26, 35], [-24, -25, -35, -44, 26, 33], [-24, -26, -33, -35, 25, 44], [-24, -26, -33, -44, 25, 35], [-24, -26, -35, -44, 25, 33], [-24, -33, -35, -44, 25, 26], [-25, -26, -33, -35, 24, 44], [-25, -26, -33, -44, 24, 35], [-25, -26, -35, -44, 24, 33], [-25, -33, -35, -44, 24, 26], [-26, -33, -35, -44, 24, 25], [-24, -25, -26, -33, -35, 44], [-24, -25, -26, -33, -44, 35], [-24, -25, -26, -35, -44, 33], [-24, -25, -33, -35, -44, 26], [-24, -26, -33, -35, -44, 25], [-25, -26, -33, -35, -44, 24], [-24, -25, -26, -33, -35, -44], [26, 35, 44], [-26, -35, 44], [-26, -44, 35], [-35, -44, 26], [-26, -35, -44], [29, 38], [-29, -38], [29, 31, 38, 49], [-29, 31, 38, 49], [-31, 29, 38, 49], [-38, 29, 31, 49], [-49, 29, 31, 38], [-29, -31, -38, 49], [-29, -31, -49, 38], [-29, -38, -49, 31], [-31, -38, -49, 29], [-29, -31, -38, -49], [31, 41, 49], [-31, -41, 49], [-31, -49, 41], [-41, -49, 31], [-31, -41, -49], [33, 41, 51, 52], [-33, -41, 51, 52], [-33, -51, 41, 52], [-33, -52, 41, 51], [-41, -51, 33, 52], [-41, -52, 33, 51], [-51, -52, 33, 41], [-33, -41, -51, 52], [-33, -41, -52, 51], [-33, -51, -52, 41], [-41, -51, -52, 33], [-33, -41, -51, -52], [33, 35, 44, 51, 52, 53], [-33, -35, 44, 51, 52, 53], [-33, -44, 35, 51, 52, 53], [-33, -51, 35, 44, 52, 53], [-33, -52, 35, 44, 51, 53], [-33, -53, 35, 44, 51, 52], [-35, -44, 33, 51, 52, 53], [-35, -51, 33, 44, 52, 53], [-35, -52, 33, 44, 51, 53], [-35, -53, 33, 44, 51, 52], [-44, -51, 33, 35, 52, 53], [-44, -52, 33, 35, 51, 53], [-44, -53, 33, 35, 51, 52], [-51, -52, 33, 35, 44, 53], [-51, -53, 33, 35, 44, 52], [-52, -53, 33, 35, 44, 51], [-33, -35, -44, 51, 52, 53], [-33, -35, -51, 44, 52, 53], [-33, -35, -52, 44, 51, 53], [-33, -35, -53, 44, 51, 52], [-33, -44, -51, 35, 52, 53], [-33, -44, -52, 35, 51, 53], [-33, -44, -53, 35, 51, 52], [-33, -51, -52, 35, 44, 53], [-33, -51, -53, 35, 44, 52], [-33, -52, -53, 35, 44, 51], [-35, -44, -51, 33, 52, 53], [-35, -44, -52, 33, 51, 53], [-35, -44, -53, 33, 51, 52], [-35, -51, -52, 33, 44, 53], [-35, -51, -53, 33, 44, 52], [-35, -52, -53, 33, 44, 51], [-44, -51, -52, 33, 35, 53], [-44, -51, -53, 33, 35, 52], [-44, -52, -53, 33, 35, 51], [-51, -52, -53, 33, 35, 44], [-33, -35, -44, -51, 52, 53], [-33, -35, -44, -52, 51, 53], [-33, -35, -44, -53, 51, 52], [-33, -35, -51, -52, 44, 53], [-33, -35, -51, -53, 44, 52], [-33, -35, -52, -53, 44, 51], [-33, -44, -51, -52, 35, 53], [-33, -44, -51, -53, 35, 52], [-33, -44, -52, -53, 35, 51], [-33, -51, -52, -53, 35, 44], [-35, -44, -51, -52, 33, 53], [-35, -44, -51, -53, 33, 52], [-35, -44, -52, -53, 33, 51], [-35, -51, -52, -53, 33, 44], [-44, -51, -52, -53, 33, 35], [-33, -35, -44, -51, -52, 53], [-33, -35, -44, -51, -53, 52], [-33, -35, -44, -52, -53, 51], [-33, -35, -51, -52, -53, 44], [-33, -44, -51, -52, -53, 35], [-35, -44, -51, -52, -53, 33], [-33, -35, -44, -51, -52, -53], [-35, 44, 53, 54], [-44, 35, 53, 54], [-53, 35, 44, 54], [-54, 35, 44, 53], [-35, -44, 53, 54], [-35, -53, 44, 54], [-35, -54, 44, 53], [-44, -53, 35, 54], [-44, -54, 35, 53], [-53, -54, 35, 44], [-35, -44, -53, 54], [-35, -44, -54, 53], [-35, -53, -54, 44], [-44, -53, -54, 35], [-35, -44, -53, -54], [38, 55], [-38, 55], [-55, 38], [38, 55], [-38, 55], [-55, 38], [38, 49, 58], [-38, 49, 58], [-49, 38, 58], [-58, 38, 49], [-38, -49, -58], [41, 49, 51, 58], [-41, 49, 51, 58], [-49, 41, 51, 58], [-51, 41, 49, 58], [-58, 41, 49, 51], [-41, -49, -51, 58], [-41, -49, -58, 51], [-41, -51, -58, 49], [-49, -51, -58, 41], [-41, -49, -51, -58], [55, 64, 66], [-55, 64, 66], [-64, 55, 66], [-66, 55, 64], [-55, -64, 66], [-55, -66, 64], [-64, -66, 55], [49, 58, 66], [-49, 58, 66], [-58, 49, 66], [-66, 49, 58], [-49, -58, -66], [49, 51, 58, 68, 69], [-49, 51, 58, 68, 69], [-51, 49, 58, 68, 69], [-58, 49, 51, 68, 69], [-68, 49, 51, 58, 69], [-69, 49, 51, 58, 68], [-49, -51, 58, 68, 69], [-49, -58, 51, 68, 69], [-49, -68, 51, 58, 69], [-49, -69, 51, 58, 68], [-51, -58, 49, 68, 69], [-51, -68, 49, 58, 69], [-51, -69, 49, 58, 68], [-58, -68, 49, 51, 69], [-58, -69, 49, 51, 68], [-68, -69, 49, 51, 58], [-49, -51, -58, -68, 69], [-49, -51, -58, -69, 68], [-49, -51, -68, -69, 58], [-49, -58, -68, -69, 51], [-51, -58, -68, -69, 49], [-49, -51, -58, -68, -69], [51, 52, 68, 69], [-51, 52, 68, 69], [-52, 51, 68, 69], [-68, 51, 52, 69], [-69, 51, 52, 68], [-51, -52, -68, 69], [-51, -52, -69, 68], [-51, -68, -69, 52], [-52, -68, -69, 51], [-51, -52, -68, -69], [51, 52, 53, 69, 71], [-51, 52, 53, 69, 71], [-52, 51, 53, 69, 71], [-53, 51, 52, 69, 71], [-69, 51, 52, 53, 71], [-71, 51, 52, 53, 69], [-51, -52, -53, 69, 71], [-51, -52, -69, 53, 71], [-51, -52, -71, 53, 69], [-51, -53, -69, 52, 71], [-51, -53, -71, 52, 69], [-51, -69, -71, 52, 53], [-52, -53, -69, 51, 71], [-52, -53, -71, 51, 69], [-52, -69, -71, 51, 53], [-53, -69, -71, 51, 52], [-51, -52, -53, -69, 71], [-51, -52, -53, -71, 69], [-51, -52, -69, -71, 53], [-51, -53, -69, -71, 52], [-52, -53, -69, -71, 51], [-51, -52, -53, -69, -71], [52, 53, 54, 63, 71], [-52, -53, 54, 63, 71], [-52, -54, 53, 63, 71], [-52, -63, 53, 54, 71], [-52, -71, 53, 54, 63], [-53, -54, 52, 63, 71], [-53, -63, 52, 54, 71], [-53, -71, 52, 54, 63], [-54, -63, 52, 53, 71], [-54, -71, 52, 53, 63], [-63, -71, 52, 53, 54], [-52, -53, -54, 63, 71], [-52, -53, -63, 54, 71], [-52, -53, -71, 54, 63], [-52, -54, -63, 53, 71], [-52, -54, -71, 53, 63], 
          [-52, -63, -71, 53, 54], [-53, -54, -63, 52, 71], [-53, -54, -71, 52, 63],
            [-53, -63, -71, 52, 54], [-54, -63, -71, 52, 53], [-52, -53, -54, -63, 71], [-52, -53, -54, -71, 63], [-52, -53, -63, -71, 54], [-52, -54, -63, -71, 53], [-53, -54, -63, -71, 52], [-52, -53, -54, -63, -71], [55, 64, 66], [-55, 64, 66], [-64, 55, 66],
              [-66, 55, 64], [-55, -64, 66], [-55, -66, 64], [-64, -66, 55], [58, 66, 68, 76, 77], [-58, 66, 68, 76, 77], 
              [-66, 58, 68, 76, 77], [-68, 58, 66, 76, 77], [-76, 58, 66, 68, 77], [-77, 58, 66, 68, 76], [-58, -66, 68, 76, 77],
                [-58, -68, 66, 76, 77], [-58, -76, 66, 68, 77], [-58, -77, 66, 68, 76], [-66, -68, 58, 76, 77], [-66, -76, 58, 68, 77], [-66, -77, 58, 68, 76], [-68, -76, 58, 66, 77], [-68, -77, 58, 66, 76], [-76, -77, 58, 66, 68], [-58, -66, -68, -76, 77], [-58, -66, -68, -77, 76], [-58, -66, -76, -77, 68], [-58, -68, -76, -77, 66], [-66, -68, -76, -77, 58], [-58, -66, -68, -76, -77], [69, 71, 79], [-69, -71, 79], [-69, -79, 71], [-71, -79, 69], [-69, -71, -79], [63, 71, 81], [-63, -71, 81], [-63, -81, 71], [-71, -81, 63], [-63, -71, -81], [64], [64, 66], [-64, 66], [-66, 64], [66, 76], [-66, 76], [-76, 66], [68, 69, 77, 79], [-68, -69, 77, 79], [-68, -77, 69, 79], [-68, -79, 69, 77], [-69, -77, 68, 79], [-69, -79, 68, 77], [-77, -79, 68, 69], [-68, -69, -77, 79], [-68, -69, -79, 77], [-68, -77, -79, 69], [-69, -77, -79, 68], 
                [-68, -69, -77, -79], [71, 79, 81], [-71, -79, 81], [-71, -81, 79], [-79, -81, 71], [-71, -79, -81]]
    puzzle=[
            [2,"_",3,"_",2,2,"_",2,1],
            [2,"_",4,2,"_","_",5,"_","_"],
            [1,2,"_",1,2,"_","_","_",2],
            [1,"_",2,"_",1,"_",2,"_",1],
            [1,"_",2,1,"_",1,1,"_",0],
            [2,2,2,"_",2,"_","_","_","_"],
            ["_",3,2,"_",3,2,2,1,"_"],
            ["_",3,"_",3,"_","_",1,"_",1],
            [1,2,2,"_","_",1,"_",1,"_"]
    ]
    listPuzzle=[]
    for item in puzzle:
        for i in item:
            listPuzzle.append(i)
    a,b=DPLL(cnfs,listPuzzle)
    if(a):
        res=[]
        row=[]
        for i in range(len(b)):
            row.append(b[i])
            if len(row)==len(puzzle[0]):
                res.append(row)
                row=[]
        for item in res:
            print(item)
    else:
        print("Sai")
main()


